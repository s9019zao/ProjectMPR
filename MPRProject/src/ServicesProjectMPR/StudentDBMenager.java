package ServicesProjectMPR;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import ProjectMPR.Student;

public class StudentDBMenager {

	private Connection conn;
	private Statement createTable;
	private PreparedStatement addStudentStmt;
	private PreparedStatement getStudentStmt;
	private PreparedStatement deleteAllStudentStmt;
	private PreparedStatement findStudentBySurnameStmt;
	private PreparedStatement findStudentByIndeksStmt;
	private PreparedStatement deleteStudentStmt;
	
	public StudentDBMenager(){
		
		try {
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");		
			createTable = conn.createStatement();
			ResultSet rs=conn.getMetaData().getTables(null, null, null, null);
			boolean StudentTableExists=false;
			while(rs.next())
			{
				if("Student".equalsIgnoreCase(rs.getString("Table_Name")))
				{
					StudentTableExists=true;
					break;
				}
			}
			if(!StudentTableExists)
			{
			createTable.executeUpdate("" +
			"CREATE TABLE Student(" +
			"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
			"indeks Integer,name varchar(20),surname varchar(40)," +
			"" +
			")");
			}
			
			addStudentStmt = conn.prepareStatement("INSERT INTO Student (indeks, name, surname) VALUES (?, ?, ?)");

			getStudentStmt = conn.prepareStatement("SELECT * FROM Student");
			
			deleteAllStudentStmt = conn.prepareStatement("DELETE FROM Student");
			
			findStudentBySurnameStmt = conn.prepareStatement("SELECT * FROM Student WHERE surname= ?");
			
			findStudentByIndeksStmt = conn.prepareStatement("SELECT * FROM Student WHERE indeks= ?");
			
			deleteStudentStmt = conn.prepareStatement("DELETE FROM Student WHERE ID = ?");
			
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
	}
	

	public void addDBStudent(Student s1) {
		try {
				addStudentStmt.setInt(1, s1.getID_number());
				addStudentStmt.setString(2, s1.getName());
				addStudentStmt.setString(3, s1.getSurname());
				addStudentStmt.executeUpdate();
		} 
		catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	public List<Student> getAllStudent(){
	List<Student> students=new ArrayList<Student>();

		try {
			ResultSet rs= getStudentStmt.executeQuery();

			while(rs.next())
			{
			students.add(new Student(rs.getInt("indeks"),rs.getString("name"),rs.getString("surname")));
			}

		} catch (SQLException e) {
	
		e.printStackTrace();
	}

	return students;
	}

	public void deleteAllStudent() {
		try {
			deleteAllStudentStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	public List<Integer> findStudentBySurname(String surname) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findStudentBySurnameStmt.setString(1, surname);
			ResultSet rs = findStudentBySurnameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public List<Integer> findStudentByIndeks(int indeks) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findStudentByIndeksStmt.setInt(1, indeks);
			ResultSet rs = findStudentByIndeksStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public void deleteStudent(List<Integer> students) {
		try {
			for (Integer id : students) {
				deleteStudentStmt.setInt(1, id);
				deleteStudentStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
}

