package ServicesProjectMPR;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import ProjectMPR.Student;
import ProjectMPR.Studies;
import ProjectMPR.Subiect;

public class StudiesDBMenager {
	
	private Connection conn;
	private Statement createTable;
	private PreparedStatement addStudiesStmt;
	private PreparedStatement getStudiesStmt;
	private PreparedStatement findStudiesByNameStmt;
	private PreparedStatement deleteStudiesStmt;
	private PreparedStatement deleteAllStudiesStmt;
	
	public StudiesDBMenager(){
	
	try {
		conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");		
		createTable = conn.createStatement();
		ResultSet rs=conn.getMetaData().getTables(null, null, null, null);
		boolean StudiesTableExists=false;
		while(rs.next())
		{
			if("Studies".equalsIgnoreCase(rs.getString("Table_Name")))
			{
				StudiesTableExists=true;
				break;
			}
		}
		if(!StudiesTableExists)
		{
		createTable.executeUpdate("" +
		"CREATE TABLE Studies(" +
		"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
		"name varchar(20)," +
		"" +
		")");
		}
		
		addStudiesStmt = conn.prepareStatement("" +"INSERT INTO Studies (name) VALUES (?)" +"");

		getStudiesStmt = conn.prepareStatement("" +"SELECT * FROM Studies" +"");
		
		findStudiesByNameStmt = conn.prepareStatement("SELECT * FROM Studies WHERE name= ?");
		
		deleteStudiesStmt = conn.prepareStatement("DELETE FROM Studies WHERE ID = ?");
		
		deleteAllStudiesStmt = conn.prepareStatement("DELETE FROM Studies");
		
		} catch (SQLException e) {
		
		e.printStackTrace();
		}
	}
	
	public List<Integer> findStudiesByName(String name) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findStudiesByNameStmt.setString(1, name);
			ResultSet rs = findStudiesByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public void addStudies(Studies s){
		try {
			addStudiesStmt.setString(1, s.getName());

			addStudiesStmt.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Studies> getAllStudies(){
		List<Studies> studies=new ArrayList<Studies>();

		try {
			ResultSet rs= getStudiesStmt.executeQuery();

			while(rs.next())
			{
				studies.add(new Studies(rs.getString("name")));
			}

		} catch (SQLException e) {
	
			e.printStackTrace();
		}

	return studies;
	}
	
	public void deleteStudies(List<Integer> studies) {
		try {
			for (Integer id : studies) {
				deleteStudiesStmt.setInt(1, id);
				deleteStudiesStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void deleteAllStudies() {
		try {
			deleteAllStudiesStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	

}